package main

// The following directive is necessary to make the package coherent:
// +build ignore

import (
	"flag"
	"fmt"
	"log"
	"os"
	"text/template"
)

const object3DTemplate = `package three
// Code generated by go generate; DO NOT EDIT.
//
// using the following cmd:
// object3d_method_generator -typeName {{ .TypeName }} -typeSlug {{ .TypeSlug }}

import "github.com/gopherjs/gopherjs/js"
	
func (obj *{{ .TypeName }}) ApplyMatrix(matrix *Matrix4) {
	obj.Call("applyMatrix", matrix)
}

func (obj *{{ .TypeName }}) Add(m Object3D) {
	obj.Object.Call("add", m.getInternalObject())
}

// func (obj *{{ .TypeName }}) Copy() *{{ .TypeName }} {
// 	return &{{ .TypeName }}{Object: obj.getInternalObject().Call("copy")}
// }

func (obj *{{ .TypeName }}) ToJSON() interface{} {
	return obj.Object.Call("toJSON").Interface()
}

func (obj *{{ .TypeName }}) getInternalObject() *js.Object {
	return obj.Object
}

`

var (
	typeName = flag.String("typeName", "", "Name of class that extends Object3D e.g. MeshBasicMaterial")
	typeSlug = flag.String("typeSlug", "", "Slugified name of class e.g. mesh_basic_material")
)

func main() {
	flag.Parse()

	if *typeName == "" {
		log.Fatal("a type name argument must be provided (e.g. -typeName MeshBasicMaterial)")
	}
	if *typeSlug == "" {
		log.Fatal("a type slug argument must be provided (e.g. -typeSlug mesh_basic_material)")
	}

	filePath := fmt.Sprintf("./gen_object3d_%s.go", *typeSlug)

	f, err := os.Create(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = template.Must(template.New("").Parse(object3DTemplate)).Execute(f, struct {
		TypeName string
		TypeSlug string
	}{
		TypeName: *typeName,
		TypeSlug: *typeSlug,
	})
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Generated file: %s", filePath)
}
